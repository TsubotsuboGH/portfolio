import bomanda
import bangirasu
import metagurosu
import miniryu2
################################################################################
class Miniryu1(bangirasu.Bangirasu):
    ############################################################################
    def __init__(self,
    tuple_key
    : tuple[str, ...],
    bo
    : bomanda.Bomanda,
    ) -> None:
        ### cprint #############################################################
        self.cprint() ##########################################################
        ########################################################################
        self.tuple_key: tuple[str, ...] \
        =    tuple_key                                                      # 01
        ### cprint #############################################################
        self.cprint(self.tuple_key) ############################################
        ########################################################################
        self.str_tuple_key: str \
        =    str(tuple_key)                                                 # !!!!
        ### cprint #############################################################
        self.cprint(self.str_tuple_key) ########################################
        ########################################################################
        self.bo \
        =    bo                                                             # !!!!
        self.me       : metagurosu.Metagurosu \
        =    metagurosu.Metagurosu(bo=bo, )                                 # !!!!
        ### return #############################################################
        return #################################################################
    ############################################################################
    def check_existence_of_value(self, ):
        ### cprint #############################################################
        self.cprint() ##########################################################
        ########################################################################
        count_0 \
        = self.me.count_document(**{
            "key_collection"
            : "race",
            "filter"
            : {}, })
        ### cprint #############################################################
        self.cprint(count_0) ###################################################
        ########################################################################
        count_1 \
        = len(list(self.me.find(**{
            "key_collection"
            : "race",
            "filter"
            : { key.replace(".$", "")
                : { "$exists"
                    : 1, }
                for key
                in  self.tuple_key}, 
            "projection"
            : "id_race", })))
        ### cprint #############################################################
        self.cprint(count_1) ###################################################
        ########################################################################
        if count_0 != count_1:
            self.raise_exception(
                msg="指定した key が存在しない document が存在します。")
        ### return #############################################################
        return self ############################################################
    ############################################################################
    def set_iter_dict_race(self, ):
        ### cprint #############################################################
        self.cprint() ##########################################################
        ########################################################################
        res \
        = self.me.find_one(**{
            "key_collection"
            : "rating",
            "filter"
            : { "str_tuple_key"
                : self.str_tuple_key, },
            "sort"
            : [ ("datetime", -1, ),
                ("id_race",  -1, ), ], })
        if res is None:
            datetime, id_race, \
            = "123456789012",  "123456789012",
        else:
            datetime, id_race, \
            = res["datetime"], res["id_race"],
        ### cprint #############################################################
        self.cprint(datetime) ##################################################
        self.cprint(id_race) ###################################################
        ########################################################################
        self.iter_dict_race \
        = self.me.find(**{
            "key_collection"
            : "race",
            "filter"
            : { "$or"
                : [{"datetime"
                    : { "$gt"
                        : datetime, }, }, # datetime が大きいものは全て取得
                   {"datetime"
                    : datetime,
                    "id_race"
                    : { "$gt"
                        : id_race, }, }, ], }, # datetime が等しい場合は、id_race が大きいものをすべて取得
            "sort"
            : [ ("datetime", 1, ),
                ("id_race",  1, ), ], })#.limit(10) # <-------------------------
        ### return #############################################################
        return self ############################################################
    ############################################################################
    def loop_iter_dict_race(self, ):
        ### cprint #############################################################
        self.cprint() ##########################################################
        ########################################################################
        for           dict_race \
        in  self.iter_dict_race:
            (miniryu2.Miniryu2(
                dict_race=
                    dict_race,
                tuple_key=
                    self.tuple_key,
                str_tuple_key=
                    self.str_tuple_key,
                bo= self.bo, )
            .create_index()
            .filter_list_horse()
            .update_dict_list_0()
            .update_dict_list_1()
            .update_dict_list_2()
            .update_dict_list_3()
            .update_dict_list_4()
            .insert_documents_to_rating()
            )
        ### return #############################################################
        return self ############################################################
    ############################################################################
